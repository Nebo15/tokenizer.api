use Mix.Config

# Configuration for production environment
# It read environment variables to follow 12 factor apps convention.


# Configure your database
config :tokenizer_api, Tokenizer.DB.Repo,
  adapter: Ecto.Adapters.Postgres,
  database: "${DB_NAME}",
  username: "${DB_USER}",
  password: "${DB_PASSWORD}",
  hostname: "${DB_HOST}",
  port: "${DB_PORT}"

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :tokenizer_api, Tokenizer.HTTP.Endpoint,
  http: [port: {:system, "APP_PORT"}],
  url:  [
    host: {:system, "APP_HOST"},
    port: {:system, "APP_PORT"},
  ],
  secret_key_base: {:system, "APP_SECRET_KEY"},
  debug_errors: false,
  code_reloader: false

# Do not print debug messages in production
config :logger, level: :info

config :tokenizer_api,
  card_data_encryption_key: {:system, "CARD_DATA_ENCRYPTION_KEY"}

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :tokenizer_api, Tokenizer.HTTP.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :tokenizer_api, Tokenizer.HTTP.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
config :phoenix, :serve_endpoints, true

# Allow to run concurrent acceptance tests on container
config :tokenizer_api, sql_sandbox: {:system, :boolean, "SQL_SANDBOX", false}

#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :tokenizer_api, Tokenizer.HTTP.Endpoint, server: true
#
